(base) Jingyuans-MBP:root jingyuan$ sys161 kernel
sys161: System/161 release 2.0.3, compiled Sep 10 2021 01:27:55

OS/161 base system version 1.99.08
Copyright (c) 2000, 2001-2005, 2008-2011, 2013, 2014
   President and Fellows of Harvard College.  All rights reserved.

Put-your-group-name-here's system version 0 (DUMBVM #1)

292k physical memory available
Device probe...
lamebus0 (system main bus)
emu0 at lamebus0
ltrace0 at lamebus0
ltimer0 at lamebus0
beep0 at ltimer0
rtclock0 at ltimer0
lrandom0 at lamebus0
random0 at lrandom0
lhd0 at lamebus0
lhd1 at lamebus0
lser0 at lamebus0
con0 at lser0

cpu0: MIPS/161 (System/161 2.x) features 0x0
OS/161 kernel [? for menu]: 

(base) Jingyuans-MBP:src jingyuan$ git log
commit 9132f4a132aa2bcd11d8c8d46f7e99030207c6b8 (HEAD -> master, tag: asst1-start, origin/master)
Author: Jingyuanisxzs <jingyuan981123@gmail.com>
Date:   Mon Sep 20 19:42:50 2021 -0700

    code added

commit 82e99197e75ba702e9f6630f2a450afbca020e49
Author: Jingyuanisxzs <jingyuan981123@gmail.com>
Date:   Mon Sep 20 19:41:41 2021 -0700

    Initial commit of os161

(base) Jingyuans-MBP:src jingyuan$ git tag
asst1-start


Code Reading Exercise:

Question 1:

The first line of OS/161 code that is executed when a trap occurs can be found at src/kern/arch/mips/locore/exception-mips1.S line 86 where a general exception handler is placed. Then the assembly language exception handler will call void mips_trap(struct trapframe *tf) at kern/arch/mips/locore/trap.c line 125. The method will use info from the registers of the process to determine what type of trap/interrupt/exception has occurred and put it into trapframe.

Interrupt refers to hardware(I/o) devices while Traps/Exception refers to system calls.

Question 2:
System calls are invoked by the mips_trap() at kern/arch/mips/locore/trap.c. The specific line of code of syscall(tf) is 224.

Question 3:
The libc in userland is used by the users while the libc in common source tree is used for building the kernel. Meanwhile, keeping two copies can be a protection so that when 1 copy goes wrong we can revert it using the other copy.

Question 4:
1. Installation location of the os is determined by configure file
2. System and Machine stats are configured by the configure file.
Thus, we might want a rerun when we change the operating system or the machine running on.

Question 5:
"machine dependent" details include number of cpu cores and registers, endianness and other run-time support for I/O devices. It's important to maintain this separation because the code can be easy to maintain and we just need to modify a small piece of machine machine dependent code and reuse all the machine independent code.

Question 6:
A trapframe is 37 * uint32_t (148 bytes). Because we need it this big to capture MIPS's 31 registers plus MIPS's 2 special $lo and $hi registers, and the coprosessor's vaddr, status, cause, and epc registers, then send all the trap to the exception handler.

Question 7:
We need to re-run the kern/conf/config script when changes has been made to the source tree or when we modified the kern/conf/config script.

Question 8:
We need to run bmake depend in kern/compile/DUMBVM when header file inclusions in the kern/compile/DUMBVM directory has been modified to ensure that dependencies are set properly.

Question 9:
We need to run bmake or bmake install in kern/compile/DUMBVM when any code in the kern/compile/DUMBVM directory has been modified to recompile the code.

Question 10:
To add a command that print out "Hello world!", we need to modify the code at os161/src/kern/main/menu.c:
1. Add a new line in the *opstable[] function for instructions:
static const char *opsmenu[] = {
	"[s]       Shell                     ",
	"[p]       Other program             ",
	"[mount]   Mount a filesystem        ",
	"[unmount] Unmount a filesystem      ",
	"[bootfs]  Set \"boot\" filesystem     ",
	"[pf]      Print a file              ",
	"[cd]      Change directory          ",
	"[pwd]     Print current directory   ",
	"[sync]    Sync filesystems          ",
	"[panic]   Intentional panic         ",
	"[q]       Quit and shut down        ",
	"[hl]      Print Hello World         ",
	NULL
};
2. Add the operation to the cmdtable[] found on line 530 such as { "hl",	cmd_hello_world },
3. Implement the cmd_hello_world function.

Question 11:
Because OS161 is not able to access the standard utilities that are present on the machine on which I am working given it is running on a virtual machine.

Question 12:
The return value is saved in register a0 and s0.

Question 13:
To add a system call, we should:
1. Add a macro for the syscall in kern/include/kern/syscall.h.
2. Add a function prototype to kern/include/syscall.h.
3. Add an entry of the macro's value in the switch statement in syscall() at kern/arch/mips/syscall/syscall.c.
Then I will repeat the following actions listed from question 7-9
1. Rerun the kern/conf/config
2. Rerun bmake depend and bmake as we have changed the code and configuration.

Question 14:
The name of the very first function that executes when OS161 starts up is "__start" at in kern/arch/sys161/main/start.S.

Question 15:
The first instruction executes is .frame sp, 24, $0 at line 52 at kern/arch/sys161/main/start.S.

Question 16:
(gdb) info breakpoints
Num     Type           Disp Enb Address    What
1       breakpoint     keep y   0x800139e4 in kmain at ../../main/main.c:211
2       breakpoint     keep y   0x80014a0c in menu at ../../main/menu.c:697

Question 17:
Between the beginning of the execution and the invocation of the kernel main function, an empty page of memory is created and boot argument string is passed to the function. A stack frame is initialized and exception handler has been copied to the first page of memory. TLB initialized. Number of CPUs and registers are passed to the function.

Question 18:
The assembly instruction that calls kmain is jal kmain at line 215 of kern/arch/sys161/main/start.S.

Question 19:

│109             ram_bootstrap();                                           │
│110             proc_bootstrap();                                          │
│111             thread_bootstrap();                                        │
│112             hardclock_bootstrap();                                     │
│113             vfs_bootstrap();                                           │
│114             kheap_nextgeneration();

Question 20:
(gdb) p *bootcpu
Cannot access memory at address 0x80000

Question 21:
(gdb) p bootcpu
{c_self = 0x8003af00, c_number = 0, c_hardware_number = 0,
c_curthread = 0x8003bf80, c_zombies = {tl_head = {tln_prev = 0x0,
tln_next = 0x8003af1c, tln_self = 0x0}, tl_tail = {
tln_prev = 0x8003af10, tln_next = 0x0, tln_self = 0x0}, tl_count = 0},
c_hardclocks = 0, c_spinlocks = 0, c_isidle = false, c_runqueue = {
tl_head = {tln_prev = 0x0, tln_next = 0x8003af44, tln_self = 0x0},
tl_tail = {tln_prev = 0x8003af38, tln_next = 0x0, tln_self = 0x0},
tl_count = 0}, c_runqueue_lock = {splk_lock = 0, splk_holder = 0x0},
c_ipi_pending = 0, c_shootdown = {{ts_placeholder = 0} <repeats 16 times>},
c_numshootdown = 0, c_ipi_lock = {splk_lock = 0, splk_holder = 0x0}}

Question 22:
(gdb) cpuarray allcpus
0 cpus

Question 23:
(gdb) cpuarray allcpus
c_isidle = false, c_runqueue = {tl_head = {tln_prev = 0x0, tln_next = 0x8003a
f44, tln_self = 0x0}, tl_tail = {tln_prev = 0x8003af38, tln_next = 0x0,
tln_self = 0x0}, tl_count = 0}, c_runqueue_lock = {splk_lock = 0, splk_ho
lder = 0x0}, c_ipi_pending = 0, c_shootdown = {{
ts_placeholder = 0} <repeats 16 times>}, c_numshootdown = 0, c_ipi_lock =
{splk_lock = 0, splk_holder = 0x0}}

